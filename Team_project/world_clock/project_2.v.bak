module LCD_ALRAM_0202(clk, reset, sw,alarm_set,alarm_on,speaker,fnd_data,fnd_sel,fnd_en);
input alarm_set,alarm_on;
input clk, reset;
input sw_hour,sw_min,sw_nara,sw_day,alarm_set,alarm_on;			//alarm_set=알람 시간 설정,alarm_on=알람 유무,sw_모드(시,분,요일),시간조절,나라
output speaker,fnd_en;
output l_am,l_pm,l_pari,l_new,l_kor;
output [6:0] day;						//키트에선 반전 
output [5:0] fnd_sel;
output [7:0] fnd_data;

reg l_pari,l_new,l_kor;
reg [6:0] day=7'b0111111;
reg [5:0] fnd_sel;
reg [7:0] fnd_data;
reg [31:0] time_cnt;				//주파수 
reg [31:0] sec_count;			//1초 증가
reg [5:0] sec,min,hour,ahour,amin,asec,p_hour,n_hour;			//amin,ahour=알람 설정 시간 
reg [3:0] sec1,sec10,min1,min10,hour1,hour10,ahour1,ahour10,amin1,amin10,asec1,asec10,phour1,phour10,nhour1,nhour10;
reg [3:0] fnd_num;
reg [2:0] digit=0;
reg [1:0] nara;
reg [7:0] nara_buff;

reg [31:0] alram_cnt;
reg start,en,same,check;
wire [3:0]day_cnt;
wire [7:0] am_pm;
wire [5:0] sel,sec,min,hour,a_min,a_hour;
wire flag,ampm;
reg [7:0] hour10,hour1,min10,min1,sec10,sec1,a_hour10,a_hour1,a_min10,a_min1;


reg [7:0] day [2:0];
watch u0(.clk(clk),.reset(reset),.sec(sec),.min(min),.hour(hour),
         .am_pm(ampm),.sw_hour(sw_hour),.sw_min(sw_min),.sw_day(sw_day),
			.flag(flag),.day_cnt(day_cnt),.a_min(a_min),.a_hour(a_hour),.set(alarm_set),.on(alarm_on));

ambulance u1 (clk, reset, en, speaker, porta);

parameter delay_100ms = 0, function_set =1, clear_disp = 2, 
disp_on = 3, entry_mode = 4, disp_data = 5, delay_50ms = 6;

wire [17:0] cnt_clk_half;
wire lcd_rw;
wire [7:0] num100,num10,num1;


assign lcd_rw = 1'b0;
assign cnt_clk_half = 187500;


assign l_am = (!reset)? 1'b1 : (!ampm)? 1'b1 : 1'b0;
assign l_pm = (!reset)? : 1'b0 (!ampm)? 1'b0 : 1'b1;

assign hour10 = (!reset)? 0 : (nara==0)? (hour/10)%10 : (nara==1)? (((hour+8)%24)/10)%10 :
					 (nara==2)? (((hour+14)%24)/10)%10 : (hour/10)%10;

assign hour10 = (!reset)? 0 : (nara==0)? hour%10 : 
					 (nara==1)? ((hour+8)%24)%10 : (nara==2)? ((hour+14)%24)%10 "0";
					 
assign hour1 = (!reset)? 0 : hour%10 + "0";

assign min10 = (!reset)? 0 : (min/10)%10 + "0";
assign min1 = (!reset)? 0 : min%10 + "0";

assign sec10 = (!reset)? 0 : (sec/10)%10 + "0";
assign sec1 = (!reset)? 0 : sec%10 + "0";

assign a_hour10 = (!reset)? 0 : (a_hour/10)%10 + "0";
assign a_hour1 = (!reset)? 0 : a_hour%10 + "0";

assign a_min10 = (!reset)? 0 : (a_min/10)%10 + "0";
assign a_min1 = (!reset)? 0 : a_min%10 + "0";

always@(posedge clk,negedge reset)
begin
	if(!reset)	{nara_buff,nara}<=0;
	else
		begin
			nara_buff<={nara_buff,sw_nara};
			if(nara_nuff==1)	begin
				if(nara>=2)	nara <= 0;
				else nara <= nara + 1;
			end
			
		end
end

	always @(posedge clk,negedge reset)
	begin
		if(!reset)	{start,alram_cnt,en,same,check} <= 0;
		else
		begin
			if(a_hour==hour && a_min==min && sec==0)	same<=1;
			
			if(!alarm_on)
			begin
				{en,same} <=0;
				if(alram_cnt!=0)	
				begin
					check <=1;
					alram_cnt<=0;
				end
				else	check <=0;
			end
			
			else
			begin
				if(!check)
				begin
					if(same==1)
					begin
						alram_cnt <= alram_cnt + 1;
						en<=1;
						if(alram_cnt>=5400000)
						begin
							cnt<= cnt+1;
							alram_cnt <= 0;
							if(cnt>=179)
							begin
								en<=0;
								same<=0;
								cnt<=0;
							end
						end
					end
				end
				else
				begin
					if((a_hour!=hour || a_min!=min) && sec==0)	check<=0;
					else													check<=1;
				end
			end
			
						
		end
	end
